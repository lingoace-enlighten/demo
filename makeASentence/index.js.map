{"version":3,"sources":["assets/makeASentence/scripts/AnswerItem.ts","assets/makeASentence/scripts/Config.ts","assets/makeASentence/scripts/Delegate.ts","assets/makeASentence/scripts/MakeASentenceScript.ts","assets/makeASentence/scripts/QuestionItem.ts"],"names":["_a","cc","_decorator","ccclass","property","AnswerItem","_super","__extends","_this","apply","this","arguments","label","AnswerItem_1","prototype","setString","value","string","getString","isValueEqual","item","onDestroy","unuse","kit","pool","PrefabPool","put","node","reuse","log","__decorate","Label","Component","exports","default","Config","data","index","correctAnswer","questions","stopCode","require","Config_1","QuestionItem_1","Delegate","rootParam","lastOpTime","tipSpaceTime","touchMoveSpaceTime","root","operateLock","start","sync","addListener","gameStart","isTeacher","scheduleOnce","startPos","questionNode","children","convertToWorldSpaceAR","Vec3","ZERO","convertToNodeSpaceAR","v2","x","y","endPos","rootNode","guildHand","clearGameTable","curTarget","curTargetBasePos","removeAllChildren","reStart","curRound","curRoundData","operation","parent","active","createRoundElement","lastRound","resetLasers","round","delListener","setOperationLock","timeout","clearTimeout","stopTip","backToBase","setOperationFree","step","setTimeout","checkShowOpTip","now","Date","words_1","forEach","correct","push","content","tipShow","tempData","curString_1","getComponent","clonePos","clone","position","tween","to","easeCubicActionOut","call","exportOperationData","on","Node","EventType","TOUCH_START","onTouchBegin","TOUCH_MOVE","onTouchMoved","TOUCH_END","onTouchReleased","TOUCH_CANCEL","off","onChooseTarget","operator","nickName","actDt","actionData","curContent","curPos","quest","Vec2","rootLocalPos","hand","onMoveTarget","pos","Tween","stopAllByTarget","setSiblingIndex","childrenCount","event","stopHand","removeLayoutFromRoot","touchPos","getLocation","str","getCorrect","boundWorld","getBoundingBoxToWorld","contains","touchStartTime","getPosition","getDeltaX","getDeltaY","touchPos_1","curString_2","correct_1","intersectRect_1","moveToPos_1","scale","split","indexOf","curBoundWorld","intersects","containRect","Rect","intersection","rect","length","maxRect","i","tempSize","size","tempArea","width","height","lastSize","lastArea","playersHurt","checkAllCorrect","resumeGameStatus","resumePosition","nodeStr","itemData","nextRound","force","addItemToQuestion","addItemToRoot","addLayoutToRoot","tempData_1","layout","Layout","type","Type","GRID","resizeMode","ResizeMode","CONTAINER","startAxis","AxisDirection","HORIZONTAL","spacingX","spacingY","updateLayout","NONE","answers","count","get","answerPrefab","includes","substring","questionPrefab","synchronous","opDt","temp","syncItemPosition","child","bool","allCorrect","hideLaser","sentenceComplete","Delegate_1","MakeASentenceScript","TaskNode","taskAudio","cheerAudio","suspireAudio","laserAudio","leftDoor","rightDoor","lasers","max","melinda","mili","teacherNode","onLoad","delegate","initLasers","laserBaseOpacity","laser","opacity","onGameReady","playIdle","snapData","action","audioEngine","play","showLasers","onStart","bind","duration","onRestart","onClickLastRound","onClickNextRound","cloneActDt","source","JSON","parse","stringify","setParams","userInfo","roleName","name","setContent","snapShot","getSnapshot","receiveMessage","callBack","that","delay","playSpine","repeatForever","set","words","showTip","hideTip","roundComplete","openTheDoor","easeCircleActionOut","onGameComplete","postMessage","onNextRound","dispatch","onToggleSwitch","ske","animation","loop","clearTracks","setToSetupPose","setAnimation","setCompleteListener","Prefab","AudioClip","sp","Skeleton","QuestionItem"],"mappings":"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","sourcesContent":["import IItem from \"./IItem\";\n\n\nconst { ccclass, property } = cc._decorator;\n/**\n * 游戏显示逻辑\n */\n@ccclass\nexport default class AnswerItem extends cc.Component implements IItem, kit.pool.IPoolHandlerComp {\n    @property(cc.Label)\n    label: cc.Label = null;\n\n    setString(value: string) {\n        this.label.string = value;\n    }\n    getString(): string {\n        return this.label.string;\n    }\n\n    isValueEqual(item: IItem): boolean {\n        return item.getString() == this.getString();\n    }\n\n    onDestroy(): void {\n        this.unuse();\n        kit.pool.PrefabPool.put(this.node, \"answerItem\", AnswerItem);\n    }\n\n    reuse(): void {\n        cc.log(\"reuse item\");\n    }\n\n    unuse(): void {\n        cc.log(\"unuse item\");\n    }\n}","/**\n * 游戏配置\n */\nexport const Config = {\n    data: [\n        {\n            index: 0,\n            correctAnswer: \"What's your name\",\n            questions: [\n                \"your\",\n                \"name\",\n                \"What's\"\n            ],\n            stopCode: \"?\"\n        },\n        {\n            index: 1,\n            correctAnswer: \"How old are you\",\n            questions: [\n                \"old\",\n                \"you\",\n                \"are\",\n                \"How\"\n            ],\n            stopCode: \"?\"\n        },\n        {\n            index: 2,\n            correctAnswer: \"I am seven\",\n            questions: [\n                \"am\",\n                \"I\",\n                \"seven\"\n            ],\n            stopCode: \".\"\n        },\n        {\n            index: 3,\n            correctAnswer: \"Raise your hand please\",\n            questions: [\n                \"please\",\n                \"your\",\n                \"Raise\",\n                \"hand\"\n            ],\n            stopCode: \".\"\n        },\n        {\n            index: 4,\n            correctAnswer: \"Be quiet please\",\n            questions: [\n                \"quiet\",\n                \"Be\",\n                \"please\"\n            ],\n            stopCode: \".\"\n        }\n    ]\n};\n\n/**\n * 物品数据\n */\nexport type ItemData = {\n    content: string,\n    position: cc.Vec2,\n    correct: boolean\n}\n/**\n * 知识点数据\n */\nexport type Knowledge = {\n    index: number,\n    correctAnswer: string,\n    questions: string[],\n    stopCode: string\n}\n/**\n * 操作数据\n */\nexport type OperationData = {\n    round: number,\n    step: number,\n    data: ItemData[],\n    curContent?: string\n}\n/**\n * 游戏轮次数据\n */\nexport type RoundData = {\n    data: Knowledge[]\n}","import AnswerItem from \"./AnswerItem\";\nimport { Config, ItemData, Knowledge, OperationData } from \"./Config\";\nimport MakeASentenceScript from \"./MakeASentenceScript\";\nimport QuestionItem from \"./QuestionItem\";\n/**\n * 游戏逻辑代理\n */\nexport default class Delegate {\n    private root: MakeASentenceScript;\n    private operation: OperationData;\n    private operateLock: boolean;\n    private curRound: number;\n    private curRoundData: Knowledge;\n    private curTarget: cc.Node;\n    private curTargetBasePos: cc.Vec2;\n    private step: number;\n    private lastOpTime: number = 0;\n    private tipSpaceTime: number = 5000;\n    private touchStartTime: number;\n    private touchMoveSpaceTime: number = 100;\n    private timeout: number;\n    constructor(rootParam: MakeASentenceScript) {\n        this.root = rootParam;\n        this.operateLock = false;\n    }\n\n    start(sync: boolean = false): void {\n        this.addListener();\n        !sync && this.gameStart();\n        if (!sync && !this.root.isTeacher) {\n            this.root.scheduleOnce(() => {\n                let startPos: any = this.root.questionNode.children[2].convertToWorldSpaceAR(cc.Vec3.ZERO);\n                startPos = this.root.node.convertToNodeSpaceAR(cc.v2(startPos.x, startPos.y));\n                let endPos: any = this.root.rootNode.children[0].convertToWorldSpaceAR(cc.Vec3.ZERO);\n                endPos = this.root.node.convertToNodeSpaceAR(cc.v2(endPos.x, endPos.y));\n                this.root.guildHand(startPos, endPos);\n            }, 0.5);\n        }\n    }\n\n    clearGameTable(): void {\n        this.curTarget = null;\n        this.curTargetBasePos = null;\n        this.root.rootNode.removeAllChildren();\n        this.root.questionNode.removeAllChildren();\n    }\n\n    reStart(): void {\n        this.curRound = 0;\n        this.curRoundData = Config.data[this.curRound];\n        this.operation = null;\n        this.root.stopCode.node.parent.active = false;\n        this.createRoundElement();\n    }\n\n    lastRound(): void {\n        this.curRound--;\n        if (this.curRound < 0) {\n            this.curRound = 0;\n        }\n        this.curRoundData = Config.data[this.curRound];\n        this.operation = null;\n        this.root.stopCode.node.parent.active = false;\n        this.createRoundElement(true);\n        this.root.resetLasers(this.operation.round);\n    }\n\n    onDestroy(): void {\n        this.delListener();\n        this.root = null;\n        this.operation = null;\n        this.curRoundData = null;\n        this.curTarget = null;\n        this.curTargetBasePos = null;\n    }\n\n    setOperationLock(): void {\n        this.operateLock = true;\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n            this.root.stopTip();\n        }\n        this.root.stopTip();\n        this.backToBase();\n    }\n\n    setOperationFree(): void {\n        this.operateLock = false;\n        if (this.step > 0) {\n            this.timeout = setTimeout(() => {\n                this.checkShowOpTip();\n            }, this.tipSpaceTime);\n        }\n    }\n\n    checkShowOpTip(): void {\n        let now = Date.now();\n        if (now - this.lastOpTime >= this.tipSpaceTime) {\n            this.lastOpTime = now;\n            let words: string[] = [];\n            this.operation.data.forEach(item => {\n                if (!item.correct) {\n                    words.push(item.content);\n                }\n            });\n            this.root.tipShow(words);\n        }\n    }\n\n    protected backToBase(): void {\n        if (this.curTarget && this.curTargetBasePos) {\n            let tempData: ItemData[] = this.operation.data;\n            let curString = this.curTarget.getComponent(QuestionItem).getString();\n            tempData.forEach(item => {\n                if (item.content == curString) {\n                    let clonePos = this.curTargetBasePos.clone();\n                    item.position = cc.v2(clonePos.x >> 0, clonePos.y >> 0);\n                }\n            });\n            cc.tween(this.curTarget)\n                .to(0.5, { x: this.curTargetBasePos.x >> 0, y: this.curTargetBasePos.y >> 0 }, cc.easeCubicActionOut())\n                .call(() => {\n                    this.root.exportOperationData(this.operation, \"operation\", -1);\n                })\n                .start();\n            this.curTarget = null;\n            this.curTargetBasePos = null;\n        }\n    }\n\n    protected addListener(): void {\n        this.root.node.on(cc.Node.EventType.TOUCH_START, this.onTouchBegin, this);\n        this.root.node.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMoved, this);\n        this.root.node.on(cc.Node.EventType.TOUCH_END, this.onTouchReleased, this);\n        this.root.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchReleased, this);\n    }\n\n    protected delListener(): void {\n        this.root.node.off(cc.Node.EventType.TOUCH_START, this.onTouchBegin, this);\n        this.root.node.off(cc.Node.EventType.TOUCH_MOVE, this.onTouchMoved, this);\n        this.root.node.off(cc.Node.EventType.TOUCH_END, this.onTouchReleased, this);\n        this.root.node.off(cc.Node.EventType.TOUCH_CANCEL, this.onTouchReleased, this);\n    }\n\n    public onChooseTarget(data: any): void {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n            this.root.stopTip();\n        }\n        this.root.operator.string = data.nickName;\n        let actDt = data.actionData;\n        let content = actDt.curContent;\n        let curPos: cc.Vec2;\n        this.root.questionNode.children.forEach(quest => {\n            if (quest.getComponent(QuestionItem).getString() == content) {\n                curPos = quest.convertToWorldSpaceAR(cc.Vec2.ZERO);\n            }\n        });\n        let rootLocalPos = this.root.node.convertToNodeSpaceAR(curPos);\n        this.root.hand.x = rootLocalPos.x;\n        this.root.hand.y = rootLocalPos.y;\n        this.root.hand.active = true;\n    }\n\n    public onMoveTarget(data: any): void {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n            this.root.stopTip();\n        }\n        this.root.hand.active = true;\n        this.root.operator.string = data.nickName;\n        let actDt = data.actionData;\n        let content = actDt.curContent;\n        let pos: any;\n        actDt.data.forEach(item => {\n            if (item.content == content) {\n                pos = item.position;\n            }\n        });\n        let curPos: cc.Vec2;\n        this.root.questionNode.children.forEach(quest => {\n            if (quest.getComponent(QuestionItem).getString() == content) {\n                if (pos) {\n                    // quest.x = pos.x;\n                    // quest.y = pos.y;\n                    cc.Tween.stopAllByTarget(quest);\n                    quest.setSiblingIndex(this.root.questionNode.childrenCount - 1);\n                    cc.tween(quest).to(0.2, { x: pos.x, y: pos.y }).start();\n                }\n                curPos = quest.convertToWorldSpaceAR(cc.Vec2.ZERO);\n            }\n        });\n        let rootLocalPos = this.root.node.convertToNodeSpaceAR(curPos);\n        cc.Tween.stopAllByTarget(this.root.hand);\n        cc.tween(this.root.hand).to(0.2, { x: rootLocalPos.x, y: rootLocalPos.y }).start();\n    }\n\n    private onTouchBegin(event: cc.Event.EventTouch): void {\n        if (this.operateLock) {\n            return;\n        }\n        this.root.stopHand();\n        this.root.stopTip();\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n            this.root.stopTip();\n        }\n        this.removeLayoutFromRoot();\n        let touchPos = event.getLocation();\n        this.root.questionNode.children.forEach(item => {\n            let str = item.getComponent(QuestionItem).getString();\n            if (!this.getCorrect(str)) {\n                let boundWorld = item.getBoundingBoxToWorld();\n                if (!this.curTarget && boundWorld.contains(touchPos)) {\n                    this.touchStartTime = Date.now();\n                    this.curTarget = item;\n                    this.curTargetBasePos = this.curTarget.getPosition();\n                    this.curTarget.setSiblingIndex(this.root.questionNode.childrenCount - 1);\n                    cc.log(`get target, name: ${str}`);\n                    this.operation.curContent = this.curTarget.getComponent(QuestionItem).getString();\n                    this.root.exportOperationData(this.operation, \"chooseTarget\");\n                }\n            }\n        });\n    }\n\n    private onTouchMoved(event: cc.Event.EventTouch): void {\n        if (this.operateLock) {\n            return;\n        }\n        if (this.curTarget) {\n            this.curTarget.x += event.getDeltaX();\n            this.curTarget.y += event.getDeltaY();\n            let now = Date.now();\n            if (now - this.touchStartTime >= this.touchMoveSpaceTime) {\n                this.touchStartTime = now;\n                let tempData: ItemData[] = this.operation.data;\n                tempData.forEach(data => {\n                    if (data.content == this.curTarget.getComponent(QuestionItem).getString()) {\n                        data.position.x = this.curTarget.x;\n                        data.position.y = this.curTarget.y;\n                    }\n                });\n                this.root.exportOperationData(this.operation, \"moveTarget\");\n            }\n        }\n    }\n\n    private onTouchReleased(event: cc.Event.EventTouch): void {\n        if (this.operateLock) {\n            return;\n        }\n        if (this.curTarget) {\n            let touchPos = event.getLocation();\n            this.operation.step++;\n            let curString = this.curTarget.getComponent(QuestionItem).getString();\n            let tempData: ItemData[] = this.operation.data;\n            let correct: boolean = false;\n            let intersectRect: { item: cc.Node, rect: cc.Rect, index: number }[] = [];\n            let moveToPos: cc.Vec3;\n            this.root.rootNode.children.forEach((item, index) => {\n                let boundWorld = item.getBoundingBoxToWorld();\n                if (this.curTarget && boundWorld.contains(touchPos)) {\n                    moveToPos = this.root.questionNode.convertToNodeSpaceAR(item.convertToWorldSpaceAR(cc.Vec3.ZERO));\n                    cc.tween(this.curTarget).to(0.25, { x: moveToPos.x, y: moveToPos.y, scale: 1 }, cc.easeCubicActionOut()).start();\n                    if (index == this.curRoundData.correctAnswer.split(\" \").indexOf(curString)) {\n                        correct = true;\n                    }\n                } else {\n                    let curBoundWorld = this.curTarget.getBoundingBoxToWorld();\n                    if (curBoundWorld.intersects(boundWorld)) {\n                        let containRect = new cc.Rect();\n                        curBoundWorld.intersection(containRect, boundWorld);\n                        intersectRect.push({ item: item, rect: containRect, index: index });\n                    }\n                }\n            });\n\n            if (!correct && intersectRect.length > 0) {\n                let maxRect: { item: cc.Node, rect: cc.Rect, index: number };\n                let i = 0;\n                while (i < intersectRect.length) {\n                    if (!maxRect) {\n                        maxRect = intersectRect[i];\n                    } else {\n                        let tempSize = intersectRect[i].rect.size;\n                        let tempArea = tempSize.width * tempSize.height;\n                        let lastSize = maxRect.rect.size;\n                        let lastArea = lastSize.width * lastSize.height;\n                        if (lastArea < tempArea) {\n                            maxRect = intersectRect[i];\n                        }\n                    }\n                    i++;\n                }\n                if (maxRect) {\n                    moveToPos = this.root.questionNode.convertToNodeSpaceAR(maxRect.item.convertToWorldSpaceAR(cc.Vec3.ZERO));\n                    cc.tween(this.curTarget).to(0.25, { x: moveToPos.x, y: moveToPos.y, scale: 1 }, cc.easeCubicActionOut()).start();\n                    if (maxRect.index == this.curRoundData.correctAnswer.split(\" \").indexOf(curString)) {\n                        correct = true;\n                    }\n                }\n            }\n            tempData.forEach(data => {\n                if (data.content == curString) {\n                    data.correct = correct;\n                    data.position = moveToPos ? cc.v2(moveToPos.x >> 0, moveToPos.y >> 0) : cc.v2(this.curTarget.x >> 0, this.curTarget.y >> 0);\n                }\n            });\n            this.root.exportOperationData(this.operation, \"operation\", correct ? 1 : 0);\n            if (!correct) {\n                this.root.playersHurt();\n                this.backToBase();\n            }\n            this.checkAllCorrect();\n        }\n        this.curTarget = null;\n        this.timeout = setTimeout(() => {\n            this.checkShowOpTip();\n        }, this.tipSpaceTime);\n    }\n    /** 恢复游戏状态 */\n    protected resumeGameStatus(): void {\n        this.curRound = this.operation.round;\n        this.curRoundData = Config.data[this.curRound];\n        this.root.rootNode.removeAllChildren();\n        this.root.questionNode.removeAllChildren();\n        this.createRoundElement();\n        this.step = this.operation.step;\n        this.root.questionNode.children.forEach(node => {\n            this.resumePosition(node);\n        });\n    }\n    protected resumePosition(node: cc.Node): void {\n        let nodeStr = node.getComponent(QuestionItem).getString();\n        this.operation.data.forEach(itemData => {\n            if (nodeStr == itemData.content) {\n                node.x = itemData.position.x;\n                node.y = itemData.position.y;\n            }\n        });\n    }\n\n    protected gameStart(): void {\n        this.curRound = 0;\n        this.curRoundData = Config.data[this.curRound];\n        this.createRoundElement();\n    }\n\n\n    nextRound(): void {\n        this.curRound++;\n        if (this.curRound >= Config.data.length) {\n            // this.root.sentenceComplete(true);\n            // this.root.exportOperationData(this.operation, \"gameComplete\");\n            // return;\n            this.curRound = Config.data.length - 1;\n        }\n        this.curRoundData = Config.data[this.curRound];\n        this.operation = null;\n        this.root.stopCode.node.parent.active = false;\n        this.createRoundElement();\n        // if (this.root.isTeacher) {\n        //     this.root.exportOperationData(this.operation, \"nextRound\");\n        // }\n        this.root.resetLasers(this.operation.round);\n    }\n\n    createRoundElement(force: boolean = false): void {\n        this.addItemToQuestion();\n        this.addItemToRoot();\n        if (!this.operation) {\n            this.addLayoutToRoot();\n            this.step = 0;\n            let tempData: ItemData[] = [];\n            this.root.questionNode.children.forEach(item => {\n                tempData.push({\n                    content: item.getComponent(QuestionItem).getString(),\n                    position: cc.v2(item.x >> 0, item.y >> 0),\n                    correct: false\n                });\n            });\n            this.operation = {\n                round: this.curRound,\n                step: this.step,\n                data: tempData\n            };\n            if (this.curRound > 0 || force) {\n                this.root.exportOperationData(this.operation, \"operation\", -1);\n            }\n            this.root.scheduleOnce(() => {\n                this.removeLayoutFromRoot();\n            }, 0.5);\n        }\n    }\n\n    addLayoutToRoot(): void {\n        if (this.root.questionNode) {\n            let layout = this.root.questionNode.getComponent(cc.Layout);\n            layout.type = cc.Layout.Type.GRID;\n            layout.resizeMode = cc.Layout.ResizeMode.CONTAINER;\n            layout.startAxis = cc.Layout.AxisDirection.HORIZONTAL;\n            layout.spacingX = 58;\n            layout.spacingY = 40;\n            layout.updateLayout();\n        }\n    }\n\n    removeLayoutFromRoot(): void {\n        if (this.root.questionNode) {\n            let layout = this.root.questionNode.getComponent(cc.Layout);\n            layout.resizeMode = cc.Layout.ResizeMode.NONE;\n            layout.type = cc.Layout.Type.NONE;\n        }\n    }\n\n    addItemToRoot(): void {\n        let answers = this.curRoundData.correctAnswer.split(\" \");\n        let count = answers.length, i = 0;\n        while (i < count) {\n            const item = kit.pool.PrefabPool.get(this.root.answerPrefab, \"answerItem\", AnswerItem);\n            if (answers[i].includes(this.curRoundData.stopCode)) {\n                item.getComponent(AnswerItem).setString(answers[i].substring(0, answers[i].length - 1));\n            } else {\n                item.getComponent(AnswerItem).setString(answers[i]);\n            }\n            this.root.rootNode && (item.parent = this.root.rootNode);\n            i++;\n        }\n        this.root.stopCode.node.parent.active = true;\n        this.root.stopCode.string = this.curRoundData.stopCode;\n    }\n\n    addItemToQuestion(): void {\n        if (this.curRoundData && this.curRoundData.questions) {\n            let count = this.curRoundData.questions.length, i = 0;\n            while (i < count) {\n                const item = kit.pool.PrefabPool.get(this.root.questionPrefab, \"questionItem\", QuestionItem);\n                item.getComponent(QuestionItem).setString(this.curRoundData.questions[i]);\n                item.parent = this.root.questionNode;\n                i++;\n            }\n        }\n    }\n\n    synchronous(opDt: any): void {\n        if (!this.operation || this.operation.round != opDt.round) {\n            this.operation = opDt;\n            this.operation.step == 0 ? this.addLayoutToRoot() : this.removeLayoutFromRoot();\n            this.root.resetLasers(opDt.round);\n            this.resumeGameStatus();\n            this.operation.step == 0 && this.root.scheduleOnce(() => {\n                this.removeLayoutFromRoot();\n            }, 0.5);\n        } else {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n                this.timeout = null;\n                this.root.stopTip();\n            }\n            if (this.root.hand.active) {\n                this.root.operator.string = '';\n                this.root.hand.active = false;\n            }\n            this.removeLayoutFromRoot();\n            this.operation.round = opDt.round;\n            this.step = this.operation.step = opDt.step;\n            let tempData = opDt.data;\n            let index = 0;\n            while (index < tempData.length) {\n                const temp = tempData[index];\n                if (temp && this.operation.data[index] && temp.content == this.operation.data[index].content) {\n                    if (this.operation.data[index].position.x != temp.position.x || this.operation.data[index].position.y != temp.position.y) {\n                        this.syncItemPosition(temp);\n                        this.operation.data[index].position.x = temp.position.x;\n                        this.operation.data[index].position.y = temp.position.y;\n                    }\n                    this.operation.data[index].correct = temp.correct;\n                }\n                index++;\n            }\n        }\n    }\n\n    protected syncItemPosition(data: ItemData): void {\n        this.root.questionNode.children.forEach(child => {\n            if (child.getComponent(QuestionItem).getString() == data.content) {\n                cc.tween(child).to(0.25, { x: data.position.x, y: data.position.y, scale: 1 }, cc.easeCubicActionOut()).start();\n            }\n        })\n    }\n\n    private getCorrect(str: string): boolean {\n        let bool = false;\n        this.operation.data.forEach(itemData => {\n            if (itemData.content == str) {\n                bool = itemData.correct;\n            }\n        });\n        return bool;\n    }\n\n    private checkAllCorrect(): void {\n        let allCorrect: boolean = true;\n        this.operation.data.forEach(itemData => {\n            allCorrect && (allCorrect = itemData.correct);\n        });\n        if (allCorrect) {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n                this.timeout = null;\n                this.root.stopTip();\n            }\n            this.root.hideLaser(this.operation.round);\n            this.root.sentenceComplete();\n            setTimeout(() => {\n                this.root.exportOperationData(this.operation, \"roundComplete\");\n            }, 1000);\n        }\n    }\n}\n","import Delegate from \"./Delegate\";\nimport QuestionItem from \"./QuestionItem\";\n\nconst { ccclass, property } = cc._decorator;\n/**\n * 游戏显示逻辑\n */\n@ccclass\nexport default class MakeASentenceScript extends cc.Component implements center.ISubGame {\n\n    @property(cc.Node)\n    TaskNode: cc.Node = null;\n\n    @property(cc.Prefab)\n    answerPrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    questionPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    rootNode: cc.Node = null;\n\n    @property(cc.Label)\n    stopCode: cc.Label = null;\n\n    @property(cc.Node)\n    questionNode: cc.Node = null;\n\n    @property(cc.AudioClip)\n    taskAudio: cc.AudioClip = null;\n\n    @property(cc.AudioClip)\n    cheerAudio: cc.AudioClip = null;\n\n    @property(cc.AudioClip)\n    suspireAudio: cc.AudioClip = null;\n\n    @property(cc.AudioClip)\n    laserAudio: cc.AudioClip = null;\n\n    // @property(cc.Node)\n    // teacherNode: cc.Node = null;\n\n    // @property(cc.Toggle)\n    // lockOperation: cc.Toggle = null;\n\n    // @property(cc.Toggle)\n    // freeOperation: cc.Toggle = null;\n\n    // @property(cc.Label)\n    // studentStatus: cc.Label = null;\n\n    @property(cc.Node)\n    hand: cc.Node = null;\n\n    @property(cc.Label)\n    operator: cc.Label = null;\n\n    @property(cc.Node)\n    leftDoor: cc.Node = null;\n\n    @property(cc.Node)\n    rightDoor: cc.Node = null;\n\n    @property([sp.Skeleton])\n    lasers: sp.Skeleton[] = [];\n\n    @property(sp.Skeleton)\n    max: sp.Skeleton = null;\n\n    @property(sp.Skeleton)\n    melinda: sp.Skeleton = null;\n\n    @property(sp.Skeleton)\n    mili: sp.Skeleton = null;\n\n    @property(cc.Node)\n    teacherNode: cc.Node = null;\n\n    bundleName: string;\n    content: center.IContent;\n    isTeacher: boolean;\n    roleName: string;\n\n    // private startTime: number;\n    // private nextTickTime: number;\n    snapData: any;\n    private laserBaseOpacity: number[];\n    protected delegate: Delegate;\n\n    onLoad() {\n        this.delegate = new Delegate(this);\n        this.initLasers();\n    }\n\n    onDestroy(): void {\n        super.onDestroy();\n        this.delegate.onDestroy();\n        this.delegate = null;\n    }\n\n    initLasers(): void {\n        this.laserBaseOpacity = [];\n        let i = 0;\n        while (i < this.lasers.length) {\n            let laser = this.lasers[i];\n            laser.node.active = true;\n            this.laserBaseOpacity.push(laser.node.opacity);\n            laser.node.opacity = 0;\n            i++;\n        }\n    }\n\n    resetLasers(round: number): void {\n        this.lasers.forEach((laser, index) => {\n            index >= round ? (laser.node.opacity = this.laserBaseOpacity[index]) : (laser.node.opacity = 0);\n        });\n    }\n\n    start() {\n        this.content && this.content.onGameReady();\n        this.teacherNode.active = this.isTeacher;\n        // this.isTeacher ? this.delegate.setOperationLock() : this.delegate.setOperationFree();\n        this.playIdle();\n        if (this.snapData && this.snapData.action != \"gameComplete\" && this.snapData.action != \"gameRestart\") {\n            this.TaskNode.active = false;\n            let round = this.snapData.actionData.round;\n            this.resetLasers(round);\n            this.delegate.synchronous(this.snapData.actionData);\n            this.delegate.start(true);\n        } else {\n            this.scheduleOnce(() => {\n                cc.audioEngine.play(this.taskAudio, false, 1);\n            }, 1);\n            this.scheduleOnce(() => {\n                this.TaskNode.active = false;\n                this.showLasers(this.onStart.bind(this));\n            }, this.taskAudio.duration + 1);\n        }\n    }\n\n    onStart(): void {\n        this.delegate.start();\n    }\n\n    onRestart(): void {\n        this.TaskNode.active = true;\n        this.delegate.clearGameTable();\n        this.initLasers();\n        this.scheduleOnce(() => {\n            cc.audioEngine.play(this.taskAudio, false, 1);\n        }, 1);\n        this.scheduleOnce(() => {\n            this.TaskNode.active = false;\n            this.showLasers(() => {\n                this.delegate.reStart();\n            });\n        }, this.taskAudio.duration + 1);\n        if (this.isTeacher) {\n            this.exportOperationData({}, \"gameRestart\");\n        }\n    }\n\n    onClickLastRound(): void {\n        if (this.isTeacher) {\n            this.delegate.clearGameTable();\n            this.delegate.lastRound();\n        }\n    }\n\n    onClickNextRound(): void {\n        if (this.isTeacher) {\n            this.delegate.clearGameTable();\n            this.delegate.nextRound();\n        }\n    }\n\n    private cloneActDt(source: any): any {\n        return JSON.parse(JSON.stringify(source));\n    }\n\n    setParams(data: { evn: center.EVN; isTeacher?: boolean; userInfo?: center.UserInfo; font?: cc.Font; }): void {\n        cc.log(`set params: ${JSON.stringify(data)}`);\n        this.isTeacher = data.isTeacher || false;\n        data.userInfo && (this.roleName = data.userInfo.name);\n    }\n\n    setContent(content: center.IContent): void {\n        this.content = content;\n        let snapShot: any = this.content.getSnapshot();\n        this.snapData = snapShot;\n    }\n\n    receiveMessage(data: any): void {\n        cc.log(`receiveMessage: ${data.action}`);\n        if (data.nickName != this.roleName) {\n            let action = data.action;\n            switch (action) {\n                case \"operation\":\n                    this.delegate.synchronous(data.actionData);\n                    if (data.correct == 0) {\n                        this.playersHurt();\n                    }\n                    break;\n                case \"roundComplete\":\n                    let round = data.actionData.round;\n                    this.hideLaser(round);\n                    this.sentenceComplete();\n                    break;\n                case \"gameComplete\":\n                    this.sentenceComplete(true);\n                    break;\n                case \"chooseTarget\":\n                    this.delegate.onChooseTarget(data);\n                    break;\n                case \"moveTarget\":\n                    this.delegate.onMoveTarget(data);\n                    break;\n                // case \"nextRound\":\n                //     this.onClickNextRound(true);\n                //     break;\n                // case \"lastRound\":\n                //     this.onClickLastRound(true);\n                //     break;\n                case \"gameRestart\":\n                    this.onRestart();\n                    break;\n            }\n        }\n    }\n\n    timeout(): void {\n\n    }\n    /**\n     * 游戏开始 显示激光\n     * @param callBack \n     */\n    showLasers(callBack?: Function): void {\n        let that = this;\n        let count: number = 0;\n        this.lasers.forEach((laser, index) => {\n            laser.node.active = true;\n            cc.tween(laser).delay(index * 0.2).call(() => {\n                cc.audioEngine.play(this.laserAudio, false, 1);\n                laser.node.opacity = this.laserBaseOpacity[index];\n                that.playSpine(laser, \"appear\", false, () => {\n                    that.playSpine(laser, \"idle\", true);\n                    count++;\n                    if (count == that.lasers.length) {\n                        callBack && callBack.apply(null);\n                    }\n                });\n            }).start();\n        });\n    }\n    /**\n     * 隐藏指定轮次的激光\n     * @param round \n     */\n    hideLaser(round: number): void {\n        let that = this;\n        this.lasers.forEach((laser, index) => {\n            if (round == index) {\n                that.playSpine(laser, \"disappear\", false, () => {\n                    laser.node.active = false;\n                });\n            }\n        });\n    }\n    /**\n     * 游戏手势指引\n     * @param startPos 开始位置\n     * @param endPos 结束位置\n     */\n    guildHand(startPos: cc.Vec3, endPos: cc.Vec3): void {\n        if (this.hand) {\n            this.hand.active = true;\n            cc.tween(this.hand).repeatForever(\n                cc.tween()\n                    .set({ x: startPos.x, y: startPos.y })\n                    .to(1.5, { x: endPos.x, y: endPos.y }, cc.easeCubicActionOut())\n                    .delay(0.5)\n            ).start();\n        }\n    }\n    /**\n     * 结束手势指引\n     */\n    stopHand(): void {\n        cc.Tween.stopAllByTarget(this.hand);\n        this.hand.active = false;\n    }\n    /**\n     * 长时间未操作（5s) 提示\n     * @param words \n     */\n    tipShow(words: string[]): void {\n        this.questionNode.children.forEach(node => {\n            if (words.includes(node.getComponent(QuestionItem).getString())) {\n                node.getComponent(QuestionItem).showTip();\n            }\n        });\n    }\n    /**\n     * 结束 未操作 提示\n     */\n    stopTip(): void {\n        this.questionNode.children.forEach(node => {\n            node.getComponent(QuestionItem).hideTip();\n        });\n    }\n    /**\n     * 游戏内角色待机\n     */\n    playIdle(): void {\n        this.playSpine(this.max, \"idle\", true);\n        this.playSpine(this.melinda, \"daiji\", true);\n        this.playSpine(this.mili, \"daiji\", true);\n    }\n    /**\n     * 角色负反馈\n     */\n    playersHurt(): void {\n        cc.log(\"playersHurt\");\n        cc.audioEngine.play(this.suspireAudio, false, 1);\n        this.playSpine(this.max, \"shiluo\", false, () => {\n            this.playSpine(this.max, \"idle\", true);\n        });\n        this.playSpine(this.melinda, \"fu_fk\", false, () => {\n            this.playSpine(this.melinda, \"daiji\", true);\n        });\n        this.playSpine(this.mili, \"fu_fankui\", false, () => {\n            this.playSpine(this.mili, \"daiji\", true);\n        });\n    }\n    /**\n     * 正反馈\n     */\n    sentenceComplete(roundComplete: boolean = false): void {\n        cc.log(\"sentenceComplete\");\n        if (roundComplete) {\n            this.playSpine(this.max, \"qinzhu\", false, () => {\n                this.playSpine(this.max, \"idle\", true);\n            });\n            this.playSpine(this.melinda, \"qingzhu\", false, () => {\n                this.playSpine(this.melinda, \"daiji\", true);\n            });\n            this.playSpine(this.mili, \"qingzhu\", false, () => {\n                this.playSpine(this.mili, \"daiji\", true);\n            });\n            this.openTheDoor();\n        } else {\n            this.playSpine(this.max, \"kaixin\", false, () => {\n                this.playSpine(this.max, \"idle\", true);\n            });\n            this.playSpine(this.melinda, \"zheng_fk\", false, () => {\n                this.playSpine(this.melinda, \"daiji\", true);\n            });\n            this.playSpine(this.mili, \"zheng_fk\", false, () => {\n                this.playSpine(this.mili, \"daiji\", true);\n            });\n            cc.audioEngine.play(this.cheerAudio, false, 1);\n            // setTimeout(() => {\n            //     !this.isTeacher && this.onNextRound(false);\n            // }, 2000);\n        }\n    }\n\n    openTheDoor(): void {\n        cc.tween(this.leftDoor).to(1, { x: -164 }, cc.easeCubicActionOut()).start();\n        cc.tween(this.rightDoor).to(1, { x: 164 }, cc.easeCircleActionOut())\n            .delay(2)\n            .call(() => {\n                this.content && this.content.onGameComplete();\n            })\n            .start();\n    }\n    /**\n     * 上报操作数据\n     * @param data \n     */\n    exportOperationData(data: any, action: string, correct: number = -1): void {\n        // if (!this.isTeacher) {\n        let tempData = { isTeacher: this.isTeacher, nickName: this.roleName, action: action, actionData: data, correct: correct };\n        this.content && this.content.postMessage(JSON.stringify(tempData));\n        // }\n    }\n    /**\n     * 下一轮\n     */\n    onNextRound(dispatch: boolean = false): void {\n        let data = { isTeacher: this.isTeacher, actionData: \"nextRound\" };\n        if (this.isTeacher && dispatch && this.content) {\n            cc.log(\"dispatch NextRound\");\n            this.content.postMessage(JSON.stringify(data));\n        }\n        if (this.delegate) {\n            this.delegate.clearGameTable();\n            this.delegate.nextRound();\n        }\n    }\n    /**\n     * 老师锁定 解锁\n     */\n    onToggleSwitch(): void {\n        let data = { isTeacher: this.isTeacher, actionData: \"\" };\n        // if (this.lockOperation.isChecked) {\n        //     data.actionData = \"lockOperation\";\n        //     cc.log(\"lockOperation\");\n        // } else {\n        //     data.actionData = \"freeOperation\";\n        //     cc.log(\"freeOperation\");\n        // }\n        this.content && this.content.postMessage(JSON.stringify(data));\n    }\n    /**\n     * 播放 Spine 动画\n     * @param ske \n     * @param animation \n     * @param loop \n     * @param callBack \n     */\n    protected playSpine(ske: sp.Skeleton, animation: string, loop: boolean = false, callBack?: Function): void {\n        if (ske && ske.animation != animation) {\n            ske.clearTracks();\n            ske.setToSetupPose();\n            ske.setAnimation(0, animation, loop);\n            callBack && ske.setCompleteListener(callBack);\n        }\n    }\n}\n","import AnswerItem from \"./AnswerItem\";\n\n\nconst { ccclass, property } = cc._decorator;\n/**\n * 游戏显示逻辑\n */\n@ccclass\nexport default class QuestionItem extends AnswerItem {\n    showTip(): void {\n        cc.Tween.stopAllByTarget(this.node);\n        cc.tween(this.node).repeatForever(\n            cc.tween(this.node).to(0.5, { scale: 1.2 }, cc.easeCubicActionOut())\n                .delay(0.2)\n                .to(0.5, { scale: 1 }, cc.easeCubicActionOut())\n        ).start();\n    }\n\n    hideTip(): void {\n        cc.Tween.stopAllByTarget(this.node);\n        this.node.scale = 1;\n    }\n\n    onDestroy(): void {\n        this.unuse();\n        kit.pool.PrefabPool.put(this.node, \"questionItem\", QuestionItem);\n    }\n\n    reuse(): void {\n        cc.log(\"QuestionItem reuse item\");\n    }\n\n    unuse(): void {\n        cc.log(\"QuestionItem un use\");\n    }\n}"],"file":"index.js"}