{"version":3,"sources":["assets/makeASentence/scripts/AnswerItem.ts","assets/makeASentence/scripts/Config.ts","assets/makeASentence/scripts/Delegate.ts","assets/makeASentence/scripts/MakeASentenceScript.ts","assets/makeASentence/scripts/QuestionItem.ts"],"names":["_a","cc","_decorator","ccclass","property","AnswerItem","_super","__extends","_this","apply","this","arguments","label","AnswerItem_1","prototype","setString","value","string","getString","isValueEqual","item","onDestroy","unuse","kit","pool","PrefabPool","put","node","reuse","log","__decorate","Label","Component","exports","default","Config","data","index","correctAnswer","questions","stopCode","require","Config_1","QuestionItem_1","Delegate","rootParam","lastOpTime","tipSpaceTime","root","operateLock","start","addListener","isTeacher","operation","resumeGameStatus","gameStart","scheduleOnce","startPos","questionNode","children","convertToWorldSpaceAR","Vec3","ZERO","convertToNodeSpaceAR","v2","x","y","endPos","rootNode","guildHand","delListener","curRoundData","curTarget","curTargetBasePos","setOperationLock","timeout","clearTimeout","backToBase","setOperationFree","step","setTimeout","checkShowOpTip","now","Date","words_1","forEach","correct","push","content","tipShow","tempData","curString_1","getComponent","position","clone","tween","to","easeCubicActionOut","call","exportOperationData","on","Node","EventType","TOUCH_START","onTouchBegin","TOUCH_MOVE","onTouchMoved","TOUCH_END","onTouchReleased","TOUCH_CANCEL","off","event","stopHand","stopTip","removeLayoutFromRoot","touchPos","getLocation","str","getCorrect","boundWorld","getBoundingBoxToWorld","contains","getPosition","setSiblingIndex","childrenCount","getDeltaX","getDeltaY","touchPos_1","curString_2","correct_1","intersectRect_1","moveToPos_1","split","indexOf","curBoundWorld","intersects","containRect","Rect","intersection","rect","length","maxRect","i","tempSize","size","tempArea","width","height","lastSize","lastArea","playersHurt","checkAllCorrect","curRound","round","removeAllChildren","createRoundElement","resumePosition","nodeStr","itemData","setPosition","nextRound","sentenceComplete","addItemToQuestion","addItemToRoot","addLayoutToRoot","tempData_1","layout","addComponent","Layout","resizeMode","ResizeMode","CONTAINER","type","Type","GRID","startAxis","AxisDirection","HORIZONTAL","spacingX","spacingY","updateLayout","removeComponent","answers","count","get","answerPrefab","includes","substring","parent","questionPrefab","synchronous","opDt","temp","syncItemPosition","child","bool","allCorrect","hideLaser","Delegate_1","MakeASentenceScript","hand","leftDoor","rightDoor","lasers","max","melinda","mili","onLoad","delegate","laserBaseOpacity","laser","opacity","onGameReady","playIdle","showLasers","onStart","bind","cloneActDt","source","JSON","parse","stringify","setParams","setContent","receiveMessage","actionData","callBack","that","active","delay","playSpine","repeatForever","set","Tween","stopAllByTarget","words","showTip","hideTip","roundComplete","openTheDoor","onNextRound","easeCircleActionOut","onGameComplete","postMessage","onToggleSwitch","ske","animation","loop","clearTracks","setToSetupPose","setAnimation","setCompleteListener","Prefab","sp","Skeleton","QuestionItem","scale"],"mappings":"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","sourcesContent":["import IItem from \"./IItem\";\n\n\nconst { ccclass, property } = cc._decorator;\n/**\n * 游戏显示逻辑\n */\n@ccclass\nexport default class AnswerItem extends cc.Component implements IItem, kit.pool.IPoolHandlerComp {\n    @property(cc.Label)\n    label: cc.Label = null;\n\n    setString(value: string) {\n        this.label.string = value;\n    }\n    getString(): string {\n        return this.label.string;\n    }\n\n    isValueEqual(item: IItem): boolean {\n        return item.getString() == this.getString();\n    }\n\n    onDestroy(): void {\n        this.unuse();\n        kit.pool.PrefabPool.put(this.node, \"answerItem\", AnswerItem);\n    }\n\n    reuse(): void {\n        cc.log(\"reuse item\");\n    }\n\n    unuse(): void {\n        cc.log(\"unuse item\");\n    }\n}","/**\n * 游戏配置\n */\nexport const Config = {\n    data: [\n        {\n            index: 0,\n            correctAnswer: \"What's your name\",\n            questions: [\n                \"your\",\n                \"name\",\n                \"What's\"\n            ],\n            stopCode: \"?\"\n        },\n        {\n            index: 1,\n            correctAnswer: \"How old are you\",\n            questions: [\n                \"old\",\n                \"you\",\n                \"are\",\n                \"How\"\n            ],\n            stopCode: \"?\"\n        },\n        {\n            index: 2,\n            correctAnswer: \"I am seven\",\n            questions: [\n                \"am\",\n                \"I\",\n                \"seven\"\n            ],\n            stopCode: \".\"\n        },\n        {\n            index: 3,\n            correctAnswer: \"Raise your hand please\",\n            questions: [\n                \"please\",\n                \"your\",\n                \"Raise\",\n                \"hand\"\n            ],\n            stopCode: \".\"\n        },\n        {\n            index: 4,\n            correctAnswer: \"Be quiet please\",\n            questions: [\n                \"quiet\",\n                \"Be\",\n                \"please\"\n            ],\n            stopCode: \".\"\n        }\n    ]\n};\n\n/**\n * 物品数据\n */\nexport type ItemData = {\n    content: string,\n    position: cc.Vec2,\n    correct: boolean\n}\n/**\n * 知识点数据\n */\nexport type Knowledge = {\n    index: number,\n    correctAnswer: string,\n    questions: string[],\n    stopCode: string\n}\n/**\n * 操作数据\n */\nexport type OperationData = {\n    round: number,\n    step: number,\n    data: ItemData[]\n}\n/**\n * 游戏轮次数据\n */\nexport type RoundData = {\n    data: Knowledge[]\n}","import AnswerItem from \"./AnswerItem\";\nimport { Config, ItemData, Knowledge, OperationData } from \"./Config\";\nimport MakeASentenceScript from \"./MakeASentenceScript\";\nimport QuestionItem from \"./QuestionItem\";\n/**\n * 游戏逻辑代理\n */\nexport default class Delegate {\n    private root: MakeASentenceScript;\n    private operation: OperationData;\n    private operateLock: boolean;\n    private curRound: number;\n    private curRoundData: Knowledge;\n    private curTarget: cc.Node;\n    private curTargetBasePos: cc.Vec2;\n    private step: number;\n    private lastOpTime: number = 0;\n    private tipSpaceTime: number = 5000;\n    private timeout: number;\n    constructor(rootParam: MakeASentenceScript) {\n        this.root = rootParam;\n        // let opDt = cc.sys.localStorage.getItem(\"operation\");\n        // if (opDt) {\n        //     this.operation = JSON.parse(opDt);\n        // }\n        this.operateLock = false;\n    }\n\n    start(): void {\n        this.addListener();\n        if (!this.root.isTeacher) {\n            this.operation ? this.resumeGameStatus() : this.gameStart();\n            this.root.scheduleOnce(() => {\n                let startPos: any = this.root.questionNode.children[2].convertToWorldSpaceAR(cc.Vec3.ZERO);\n                startPos = this.root.node.convertToNodeSpaceAR(cc.v2(startPos.x, startPos.y));\n                let endPos: any = this.root.rootNode.children[0].convertToWorldSpaceAR(cc.Vec3.ZERO);\n                endPos = this.root.node.convertToNodeSpaceAR(cc.v2(endPos.x, endPos.y));\n                this.root.guildHand(startPos, endPos);\n            }, 0.5);\n        }\n    }\n\n    onDestroy(): void {\n        this.delListener();\n        this.root = null;\n        this.operation = null;\n        this.curRoundData = null;\n        this.curTarget = null;\n        this.curTargetBasePos = null;\n    }\n\n    setOperationLock(): void {\n        this.operateLock = true;\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n        }\n        this.backToBase();\n    }\n\n    setOperationFree(): void {\n        this.operateLock = false;\n        if (this.step > 0) {\n            this.timeout = setTimeout(() => {\n                this.checkShowOpTip();\n            }, this.tipSpaceTime);\n        }\n    }\n\n    checkShowOpTip(): void {\n        let now = Date.now();\n        if (now - this.lastOpTime >= this.tipSpaceTime) {\n            this.lastOpTime = now;\n            let words: string[] = [];\n            this.operation.data.forEach(item => {\n                if (!item.correct) {\n                    words.push(item.content);\n                }\n            });\n            this.root.tipShow(words);\n        }\n    }\n\n    protected backToBase(): void {\n        if (this.curTarget && this.curTargetBasePos) {\n            let tempData: ItemData[] = this.operation.data;\n            let curString = this.curTarget.getComponent(QuestionItem).getString();\n            tempData.forEach(item => {\n                if (item.content == curString) {\n                    item.position = this.curTargetBasePos.clone();\n                }\n            });\n            cc.tween(this.curTarget)\n                .to(0.5, { x: this.curTargetBasePos.x, y: this.curTargetBasePos.y }, cc.easeCubicActionOut())\n                .call(() => {\n                    this.root.exportOperationData(this.operation);\n                })\n                .start();\n            this.curTarget = null;\n            this.curTargetBasePos = null;\n        }\n    }\n\n    protected addListener(): void {\n        this.root.node.on(cc.Node.EventType.TOUCH_START, this.onTouchBegin, this);\n        this.root.node.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMoved, this);\n        this.root.node.on(cc.Node.EventType.TOUCH_END, this.onTouchReleased, this);\n        this.root.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchReleased, this);\n    }\n\n    protected delListener(): void {\n        this.root.node.off(cc.Node.EventType.TOUCH_START, this.onTouchBegin, this);\n        this.root.node.off(cc.Node.EventType.TOUCH_MOVE, this.onTouchMoved, this);\n        this.root.node.off(cc.Node.EventType.TOUCH_END, this.onTouchReleased, this);\n        this.root.node.off(cc.Node.EventType.TOUCH_CANCEL, this.onTouchReleased, this);\n    }\n\n    private onTouchBegin(event: cc.Event.EventTouch): void {\n        if (this.operateLock) {\n            return;\n        }\n        this.root.stopHand();\n        this.root.stopTip();\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n        }\n        this.removeLayoutFromRoot();\n        let touchPos = event.getLocation();\n        this.root.questionNode.children.forEach(item => {\n            let str = item.getComponent(QuestionItem).getString();\n            if (!this.getCorrect(str)) {\n                let boundWorld = item.getBoundingBoxToWorld();\n                if (!this.curTarget && boundWorld.contains(touchPos)) {\n                    this.curTarget = item;\n                    this.curTargetBasePos = this.curTarget.getPosition();\n                    this.curTarget.setSiblingIndex(this.root.questionNode.childrenCount - 1);\n                    cc.log(`get target, name: ${str}`);\n                }\n            }\n        });\n    }\n\n    private onTouchMoved(event: cc.Event.EventTouch): void {\n        if (this.operateLock) {\n            return;\n        }\n        if (this.curTarget) {\n            this.curTarget.x += event.getDeltaX();\n            this.curTarget.y += event.getDeltaY();\n        }\n    }\n\n    private onTouchReleased(event: cc.Event.EventTouch): void {\n        if (this.operateLock) {\n            return;\n        }\n        if (this.curTarget) {\n            let touchPos = event.getLocation();\n            this.operation.step++;\n            let curString = this.curTarget.getComponent(QuestionItem).getString();\n            let tempData: ItemData[] = this.operation.data;\n            let correct: boolean = false;\n            let intersectRect: { item: cc.Node, rect: cc.Rect, index: number }[] = [];\n            let moveToPos: cc.Vec3;\n            this.root.rootNode.children.forEach((item, index) => {\n                let boundWorld = item.getBoundingBoxToWorld();\n                if (this.curTarget && boundWorld.contains(touchPos)) {\n                    moveToPos = this.root.questionNode.convertToNodeSpaceAR(item.convertToWorldSpaceAR(cc.Vec3.ZERO));\n                    cc.tween(this.curTarget).to(0.25, { x: moveToPos.x, y: moveToPos.y }, cc.easeCubicActionOut()).start();\n                    if (index == this.curRoundData.correctAnswer.split(\" \").indexOf(curString)) {\n                        correct = true;\n                    }\n                } else {\n                    let curBoundWorld = this.curTarget.getBoundingBoxToWorld();\n                    if (curBoundWorld.intersects(boundWorld)) {\n                        let containRect = new cc.Rect();\n                        curBoundWorld.intersection(containRect, boundWorld);\n                        intersectRect.push({ item: item, rect: containRect, index: index });\n                    }\n                }\n            });\n\n            if (!correct && intersectRect.length > 0) {\n                let maxRect: { item: cc.Node, rect: cc.Rect, index: number };\n                let i = 0;\n                while (i < intersectRect.length) {\n                    if (!maxRect) {\n                        maxRect = intersectRect[i];\n                    } else {\n                        let tempSize = intersectRect[i].rect.size;\n                        let tempArea = tempSize.width * tempSize.height;\n                        let lastSize = maxRect.rect.size;\n                        let lastArea = lastSize.width * lastSize.height;\n                        if (lastArea < tempArea) {\n                            maxRect = intersectRect[i];\n                        }\n                    }\n                    i++;\n                }\n                if (maxRect) {\n                    moveToPos = this.root.questionNode.convertToNodeSpaceAR(maxRect.item.convertToWorldSpaceAR(cc.Vec3.ZERO));\n                    cc.tween(this.curTarget).to(0.25, { x: moveToPos.x, y: moveToPos.y }, cc.easeCubicActionOut()).start();\n                    if (maxRect.index == this.curRoundData.correctAnswer.split(\" \").indexOf(curString)) {\n                        correct = true;\n                    }\n                }\n            }\n            tempData.forEach(data => {\n                if (data.content == curString) {\n                    data.correct = correct;\n                    data.position = moveToPos ? cc.v2(moveToPos.x >> 0, moveToPos.y >> 0) : cc.v2(this.curTarget.x >> 0, this.curTarget.y >> 0);\n                }\n            });\n            this.root.exportOperationData(this.operation);\n            if (!correct) {\n                this.root.playersHurt();\n                this.backToBase();\n            }\n            // let dataStr = JSON.stringify(this.operation);\n            // cc.sys.localStorage.setItem(\"operation\", dataStr);\n            this.checkAllCorrect();\n        }\n        this.curTarget = null;\n        this.timeout = setTimeout(() => {\n            this.checkShowOpTip();\n        }, this.tipSpaceTime);\n    }\n    /** 恢复游戏状态 */\n    protected resumeGameStatus(): void {\n        this.curRound = this.operation.round;\n        this.curRoundData = Config.data[this.curRound];\n        this.root.rootNode.removeAllChildren();\n        this.root.questionNode.removeAllChildren();\n        this.createRoundElement();\n        this.step = this.operation.step;\n        this.root.questionNode.children.forEach(node => {\n            this.resumePosition(node);\n        });\n    }\n    protected resumePosition(node: cc.Node): void {\n        let nodeStr = node.getComponent(QuestionItem).getString();\n        this.operation.data.forEach(itemData => {\n            if (nodeStr == itemData.content) {\n                node.setPosition(itemData.position);\n            }\n        });\n    }\n\n    protected gameStart(): void {\n        this.curRound = 0;\n        this.curRoundData = Config.data[this.curRound];\n        this.createRoundElement();\n    }\n\n\n    nextRound(): void {\n        this.operateLock = false;\n        this.curTarget = null;\n        this.curTargetBasePos = null;\n        this.curRound++;\n        if (this.curRound >= Config.data.length) {\n            // this.curRound = 0;\n            // this.root.showLasers();\n            this.root.sentenceComplete(true);\n            return;\n        }\n        this.curRoundData = Config.data[this.curRound];\n        this.root.rootNode.removeAllChildren();\n        this.root.questionNode.removeAllChildren();\n        this.operation = null;\n        this.createRoundElement();\n    }\n\n    createRoundElement(): void {\n        this.addItemToQuestion();\n        this.addItemToRoot();\n        if (!this.operation) {\n            this.addLayoutToRoot();\n            this.step = 0;\n            let tempData: ItemData[] = [];\n            this.root.questionNode.children.forEach(item => {\n                tempData.push({\n                    content: item.getComponent(QuestionItem).getString(),\n                    position: cc.v2(item.x >> 0, item.y >> 0),\n                    correct: false\n                });\n            });\n            this.operation = {\n                round: this.curRound,\n                step: this.step,\n                data: tempData\n            };\n            // let dataStr = JSON.stringify(this.operation);\n            // cc.sys.localStorage.setItem(\"operation\", dataStr);\n            this.root.exportOperationData(this.operation);\n            this.root.scheduleOnce(() => {\n                this.removeLayoutFromRoot();\n            }, 0.5);\n        }\n    }\n\n    addLayoutToRoot(): void {\n        if (this.root.questionNode) {\n            let layout = this.root.questionNode.addComponent(cc.Layout);\n            layout.resizeMode = cc.Layout.ResizeMode.CONTAINER;\n            layout.type = cc.Layout.Type.GRID;\n            layout.startAxis = cc.Layout.AxisDirection.HORIZONTAL;\n            layout.spacingX = 58;\n            layout.spacingY = 40;\n            layout.updateLayout();\n        }\n    }\n\n    removeLayoutFromRoot(): void {\n        this.root.questionNode.removeComponent(cc.Layout);\n    }\n\n    addItemToRoot(): void {\n        let answers = this.curRoundData.correctAnswer.split(\" \");\n        let count = answers.length, i = 0;\n        while (i < count) {\n            // const item =  new cc.Node();\n            // let label = item.addComponent(cc.Label);\n            // label.string = this.curRoundData.questions[i];\n            // item.name = `box${i}`;\n            // this.root.rootNode && (item.parent = this.root.rootNode);\n            const item = kit.pool.PrefabPool.get(this.root.answerPrefab, \"answerItem\", AnswerItem);\n            if (answers[i].includes(this.curRoundData.stopCode)) {\n                item.getComponent(AnswerItem).setString(answers[i].substring(0, answers[i].length - 1));\n            } else {\n                item.getComponent(AnswerItem).setString(answers[i]);\n            }\n            this.root.rootNode && (item.parent = this.root.rootNode);\n            i++;\n        }\n        this.root.stopCode.string = this.curRoundData.stopCode;\n    }\n\n    addItemToQuestion(): void {\n        let count = this.curRoundData.questions.length, i = 0;\n        while (i < count) {\n            // let item = cc.instantiate(this.root.questionPrefab);\n            // item.parent = this.root.questionNode;\n            const item = kit.pool.PrefabPool.get(this.root.questionPrefab, \"questionItem\", QuestionItem);\n            item.getComponent(QuestionItem).setString(this.curRoundData.questions[i]);\n            item.parent = this.root.questionNode;\n            i++;\n        }\n    }\n\n    synchronous(opDt: any): void {\n        // if (!this.operation) {\n        //     this.operation = opDt;\n        //     this.resumeGameStatus();\n        // } else {\n            // this.operation.round = opDt.round;\n            // this.step = this.operation.step = opDt.step;\n            // let tempData = opDt.data;\n            // let index = 0;\n            // while (index < tempData.length) {\n            //     const temp = tempData[index];\n            //     if (temp && this.operation.data[index] && temp.content == this.operation.data[index].content) {\n            //         if (this.operation.data[index].position.x != temp.position.x || this.operation.data[index].position.y != temp.position.you) {\n            //             this.syncItemPosition(temp);\n            //             this.operation.data[index].position.x = temp.position.x;\n            //             this.operation.data[index].position.y = temp.position.y;\n            //         }\n            //     }\n            //     index++;\n            // }\n        // }\n        if (!this.operation || this.operation.round != opDt.round) {\n            this.operation = opDt;\n            this.resumeGameStatus();\n        } else {\n            this.operation.round = opDt.round;\n            this.step = this.operation.step = opDt.step;\n            let tempData = opDt.data;\n            let index = 0;\n            while (index < tempData.length) {\n                const temp = tempData[index];\n                if (temp && this.operation.data[index] && temp.content == this.operation.data[index].content) {\n                    if (this.operation.data[index].position.x != temp.position.x || this.operation.data[index].position.y != temp.position.y) {\n                        this.syncItemPosition(temp);\n                        this.operation.data[index].position.x = temp.position.x;\n                        this.operation.data[index].position.y = temp.position.y;\n                    }\n                }\n                index++;\n            }\n        }\n    }\n\n    protected syncItemPosition(data: ItemData): void {\n        this.root.questionNode.children.forEach(child => {\n            if (child.getComponent(QuestionItem).getString() == data.content) {\n                cc.tween(child).to(0.5, { x: data.position.x, y: data.position.y }, cc.easeCubicActionOut()).start();\n            }\n        })\n    }\n\n    private getCorrect(str: string): boolean {\n        let bool = false;\n        this.operation.data.forEach(itemData => {\n            if (itemData.content == str) {\n                bool = itemData.correct;\n            }\n        });\n        return bool;\n    }\n\n    private checkAllCorrect(): void {\n        let allCorrect: boolean = true;\n        this.operation.data.forEach(itemData => {\n            allCorrect && (allCorrect = itemData.correct);\n        });\n        if (allCorrect) {\n            // this.operateLock = true;\n            // this.root.rootNode.children.forEach((node, index) => {\n            //     cc.tween(node).delay(0.5).to(0.5, { opacity: 0 }, cc.easeCubicActionOut()).call(() => {\n            //         if (index == (this.root.rootNode.childrenCount - 1)) {\n            //             this.nextRound();\n            //         }\n            //     }).start();\n            // });\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n                this.timeout = null;\n            }\n            this.root.hideLaser(this.operation.round);\n            this.root.sentenceComplete();\n        }\n    }\n}\n","import Delegate from \"./Delegate\";\nimport QuestionItem from \"./QuestionItem\";\n\nconst { ccclass, property } = cc._decorator;\n/**\n * 游戏显示逻辑\n */\n@ccclass\nexport default class MakeASentenceScript extends cc.Component implements center.ISubGame {\n    @property(cc.Prefab)\n    answerPrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    questionPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    rootNode: cc.Node = null;\n\n    @property(cc.Label)\n    stopCode: cc.Label = null;\n\n    @property(cc.Node)\n    questionNode: cc.Node = null;\n\n    // @property(cc.Node)\n    // teacherNode: cc.Node = null;\n\n    // @property(cc.Toggle)\n    // lockOperation: cc.Toggle = null;\n\n    // @property(cc.Toggle)\n    // freeOperation: cc.Toggle = null;\n\n    // @property(cc.Label)\n    // studentStatus: cc.Label = null;\n\n    @property(cc.Node)\n    hand: cc.Node = null;\n\n    @property(cc.Node)\n    leftDoor: cc.Node = null;\n\n    @property(cc.Node)\n    rightDoor: cc.Node = null;\n\n    @property([sp.Skeleton])\n    lasers: sp.Skeleton[] = [];\n\n    @property(sp.Skeleton)\n    max: sp.Skeleton = null;\n\n    @property(sp.Skeleton)\n    melinda: sp.Skeleton = null;\n\n    @property(sp.Skeleton)\n    mili: sp.Skeleton = null;\n\n    bundleName: string;\n    content: center.IContent;\n    isTeacher: boolean;\n\n    // private startTime: number;\n    // private nextTickTime: number;\n    private laserBaseOpacity: number[];\n    protected delegate: Delegate;\n\n    onLoad() {\n        this.delegate = new Delegate(this);\n        this.laserBaseOpacity = [];\n        let i = 0;\n        while (i < this.lasers.length) {\n            let laser = this.lasers[i];\n            this.laserBaseOpacity.push(laser.node.opacity);\n            laser.node.opacity = 0;\n            i++;\n        }\n    }\n\n    onDestroy(): void {\n        super.onDestroy();\n        this.delegate.onDestroy();\n        this.delegate = null;\n    }\n\n    start() {\n        // if (!this.startTime) {\n        //     this.startTime = Date.now();\n        // }\n        this.content && this.content.onGameReady();\n        // this.teacherNode && (this.teacherNode.active = this.isTeacher);\n        // if (this.studentStatus) {\n        //     this.studentStatus.node.active = !this.isTeacher;\n        //     this.studentStatus.node.active && (this.studentStatus.string = \"freeOperation\");\n        // }\n\n        /** -- 模拟数据 -- */\n        // let localDt = cc.sys.localStorage.getItem(\"operation\");\n        // if (localDt) {\n        //     this.isTeacher = true;\n        //     this.localData = JSON.parse(localDt);\n        // }\n        /** --- --- */\n        this.isTeacher && this.delegate.setOperationLock();\n        this.playIdle();\n        this.showLasers(this.onStart.bind(this));\n    }\n\n    onStart(): void {\n        this.delegate.start();\n    }\n    // private dtIndx: number = 0;\n    // private curDt: any;\n\n    // update(dt: number): void {\n    //     if (this.isTeacher && this.startTime) {\n    //         if (this.localData && this.dtIndx < this.localData.length) {\n    //             let curNow: number = Date.now();\n    //             if (!this.curDt) {\n    //                 this.curDt = this.localData[this.dtIndx];\n    //                 cc.log(`dtIdx:${this.dtIndx}, dt:${JSON.stringify(this.curDt)}`);\n    //                 this.nextTickTime = this.startTime + this.curDt.duration;\n    //                 cc.log(`curNow:${curNow}, nextTickTime:${this.nextTickTime}`);\n    //             }\n    //             // 1秒60帧 换算16毫米1帧\n    //             if (Math.abs(curNow - this.nextTickTime) <= 16) {\n    //                 this.delegate.synchronous(this.cloneActDt(this.curDt.actionData));\n    //                 this.dtIndx++;\n    //                 this.curDt = null;\n    //             }\n    //         }\n    //     }\n    // }\n\n    private cloneActDt(source: any): any {\n        return JSON.parse(JSON.stringify(source));\n    }\n\n    setParams(data: { evn: center.EVN; isTeacher?: boolean; userInfo?: center.UserInfo; font?: cc.Font; }): void {\n        cc.log(`set params: ${JSON.stringify(data)}`);\n        this.isTeacher = data.isTeacher || false;\n    }\n\n    setContent(content: center.IContent): void {\n        this.content = content;\n    }\n\n    receiveMessage(data: any): void {\n        cc.log(`receiveMessage: ${data}`);\n        if (data.isTeacher) {\n            if (!this.isTeacher) {\n                let actionData = data.actionData;\n                switch (actionData) {\n                    case \"nextRound\":\n                        this.delegate.nextRound();\n                        break;\n                    // case \"lockOperation\":\n                    //     this.delegate.setOperationLock();\n                    //     this.studentStatus.string = \"lockOperation\";\n                    //     break;\n                    // case \"freeOperation\":\n                    //     this.delegate.setOperationFree();\n                    //     this.studentStatus.string = \"freeOperation\";\n                    //     break;\n                }\n            }\n        } else {\n            if (this.isTeacher) {\n                this.delegate.synchronous(data.actionData);\n            }\n        }\n    }\n    /**\n     * 游戏开始 显示激光\n     * @param callBack \n     */\n    showLasers(callBack?: Function): void {\n        let that = this;\n        let count: number = 0;\n        this.lasers.forEach((laser, index) => {\n            laser.node.active = true;\n            cc.tween(laser).delay(index * 0.2).call(() => {\n                laser.node.opacity = this.laserBaseOpacity[index];\n                that.playSpine(laser, \"appear\", false, () => {\n                    that.playSpine(laser, \"idle\", true);\n                    count++;\n                    if (count == that.lasers.length) {\n                        callBack && callBack.apply(null);\n                    }\n                });\n            }).start();\n        });\n    }\n    /**\n     * 隐藏指定轮次的激光\n     * @param round \n     */\n    hideLaser(round: number): void {\n        let that = this;\n        this.lasers.forEach((laser, index) => {\n            if (round == index) {\n                that.playSpine(laser, \"disappear\", false, () => {\n                    laser.node.active = false;\n                });\n            }\n        });\n    }\n    /**\n     * 游戏手势指引\n     * @param startPos 开始位置\n     * @param endPos 结束位置\n     */\n    guildHand(startPos: cc.Vec3, endPos: cc.Vec3): void {\n        if (this.hand) {\n            this.hand.active = true;\n            cc.tween(this.hand).repeatForever(\n                cc.tween()\n                    .set({ x: startPos.x, y: startPos.y })\n                    .to(1.5, { x: endPos.x, y: endPos.y }, cc.easeCubicActionOut())\n                    .delay(0.5)\n            ).start();\n        }\n    }\n    /**\n     * 结束手势指引\n     */\n    stopHand(): void {\n        cc.Tween.stopAllByTarget(this.hand);\n        this.hand.active = false;\n    }\n    /**\n     * 长时间未操作（5s) 提示\n     * @param words \n     */\n    tipShow(words: string[]): void {\n        this.questionNode.children.forEach(node => {\n            if (words.includes(node.getComponent(QuestionItem).getString())) {\n                // cc.Tween.stopAllByTarget(node);\n                // cc.tween(node).repeatForever(\n                //     cc.tween(node).to(0.5, { scale: 1.2 }, cc.easeCubicActionOut())\n                //         .delay(0.2)\n                //         .to(0.5, { scale: 1 }, cc.easeCubicActionOut())\n                // ).start();\n                node.getComponent(QuestionItem).showTip();\n            }\n        });\n    }\n    /**\n     * 结束 未操作 提示\n     */\n    stopTip(): void {\n        this.questionNode.children.forEach(node => {\n            // cc.Tween.stopAllByTarget(node);\n            // node.scale = 1;\n            node.getComponent(QuestionItem).hideTip();\n        });\n    }\n    /**\n     * 游戏内角色待机\n     */\n    playIdle(): void {\n        this.playSpine(this.max, \"idle\", true);\n        this.playSpine(this.melinda, \"daiji\", true);\n        this.playSpine(this.mili, \"daiji\", true);\n    }\n    /**\n     * 角色负反馈\n     */\n    playersHurt(): void {\n        cc.log(\"playersHurt\");\n        this.playSpine(this.max, \"shiluo\", false, () => {\n            this.playSpine(this.max, \"idle\", true);\n        });\n        this.playSpine(this.melinda, \"fu_fk\", false, () => {\n            this.playSpine(this.melinda, \"daiji\", true);\n        });\n        this.playSpine(this.mili, \"fu_fankui\", false, () => {\n            this.playSpine(this.mili, \"daiji\", true);\n        });\n    }\n    /**\n     * 正反馈\n     */\n    sentenceComplete(roundComplete: boolean = false): void {\n        cc.log(\"sentenceComplete\");\n        if (roundComplete) {\n            this.playSpine(this.max, \"qinzhu\", false, () => {\n                this.playSpine(this.max, \"idle\", true);\n            });\n            this.playSpine(this.melinda, \"qingzhu\", false, () => {\n                this.playSpine(this.melinda, \"daiji\", true);\n            });\n            this.playSpine(this.mili, \"qingzhu\", false, () => {\n                this.playSpine(this.mili, \"daiji\", true);\n            });\n            this.openTheDoor();\n        } else {\n            this.playSpine(this.max, \"kaixin\", false, () => {\n                this.playSpine(this.max, \"idle\", true);\n            });\n            this.playSpine(this.melinda, \"zheng_fk\", false, () => {\n                this.playSpine(this.melinda, \"daiji\", true);\n            });\n            this.playSpine(this.mili, \"zheng_fk\", false, () => {\n                this.playSpine(this.mili, \"daiji\", true);\n            });\n            this.scheduleOnce(this.onNextRound.bind(this), 2);\n        }\n    }\n\n    openTheDoor(): void {\n        cc.tween(this.leftDoor).to(1, { x: -164 }, cc.easeCubicActionOut()).start();\n        cc.tween(this.rightDoor).to(1, { x: 164 }, cc.easeCircleActionOut())\n            .delay(2)\n            .call(() => {\n                this.content && this.content.onGameComplete();\n                // this.localData && cc.sys.localStorage.setItem(\"operation\", JSON.stringify(this.localData));\n            })\n            .start();\n    }\n    // private localData: any[] = [];\n    /**\n     * 上报操作数据\n     * @param data \n     */\n    exportOperationData(data: any): void {\n        let tempData = { isTeacher: this.isTeacher, actionData: data };\n        this.content && this.content.postMessage(JSON.stringify(tempData));\n        // !this.isTeacher && this.localData.push(tempData);\n    }\n    /**\n     * 下一轮\n     */\n    onNextRound(): void {\n        let data = { isTeacher: this.isTeacher, actionData: \"nextRound\" };\n        this.content && this.content.postMessage(JSON.stringify(data));\n        this.delegate && this.delegate.nextRound();\n        cc.log(\"onNextRound\");\n    }\n    /**\n     * 老师锁定 解锁\n     */\n    onToggleSwitch(): void {\n        let data = { isTeacher: this.isTeacher, actionData: \"\" };\n        // if (this.lockOperation.isChecked) {\n        //     data.actionData = \"lockOperation\";\n        //     cc.log(\"lockOperation\");\n        // } else {\n        //     data.actionData = \"freeOperation\";\n        //     cc.log(\"freeOperation\");\n        // }\n        this.content && this.content.postMessage(JSON.stringify(data));\n    }\n    /**\n     * 播放 Spine 动画\n     * @param ske \n     * @param animation \n     * @param loop \n     * @param callBack \n     */\n    protected playSpine(ske: sp.Skeleton, animation: string, loop: boolean = false, callBack?: Function): void {\n        if (ske && ske.animation != animation) {\n            ske.clearTracks();\n            ske.setToSetupPose();\n            ske.setAnimation(0, animation, loop);\n            callBack && ske.setCompleteListener(callBack);\n        }\n    }\n}\n","import AnswerItem from \"./AnswerItem\";\n\n\nconst { ccclass, property } = cc._decorator;\n/**\n * 游戏显示逻辑\n */\n@ccclass\nexport default class QuestionItem extends AnswerItem {\n    showTip(): void {\n        cc.Tween.stopAllByTarget(this.node);\n        cc.tween(this.node).repeatForever(\n            cc.tween(this.node).to(0.5, { scale: 1.2 }, cc.easeCubicActionOut())\n                .delay(0.2)\n                .to(0.5, { scale: 1 }, cc.easeCubicActionOut())\n        ).start();\n    }\n\n    hideTip(): void {\n        cc.Tween.stopAllByTarget(this.node);\n        this.node.scale = 1;\n    }\n\n    onDestroy(): void {\n        this.unuse();\n        kit.pool.PrefabPool.put(this.node, \"questionItem\", QuestionItem);\n    }\n\n    reuse(): void {\n        cc.log(\"QuestionItem reuse item\");\n    }\n\n    unuse(): void {\n        cc.log(\"QuestionItem un use\");\n    }\n}"],"file":"index.js"}